import 'package:flutter/material.dart';
import '../../utils/firebase_debug_utils.dart';

// üîç Firebase Debug Sayfasƒ±
// Geli≈ütirme sƒ±rasƒ±nda Firebase baƒülantƒ± sorunlarƒ±nƒ± test etme aray√ºz√º
class FirebaseDebugPage extends StatefulWidget {
  const FirebaseDebugPage({super.key});

  @override
  State<FirebaseDebugPage> createState() => _FirebaseDebugPageState();
}

class _FirebaseDebugPageState extends State<FirebaseDebugPage> {
  Map<String, dynamic>? _debugResults;
  bool _isRunning = false;

  @override
  void initState() {
    super.initState();
    _runSystemCheck();
  }

  Future<void> _runSystemCheck() async {
    setState(() => _isRunning = true);

    try {
      final results = await FirebaseDebugUtils.performSystemCheck();
      setState(() {
        _debugResults = results;
        _isRunning = false;
      });

      // Console'a da yazdƒ±r
      FirebaseDebugUtils.printDebugReport(results);
    } catch (e) {
      setState(() {
        _debugResults = {
          'error': e.toString(),
          'summary': {
            'message': '‚ùå Sistem kontrol√º ba≈üarƒ±sƒ±z',
            'allPassed': false,
            'issues': ['Sistem kontrol√º sƒ±rasƒ±nda hata olu≈ütu: $e'],
          }
        };
        _isRunning = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('üîç Firebase Debug'),
        backgroundColor: Colors.orange,
        foregroundColor: Colors.white,
        actions: [
          IconButton(
            onPressed: _isRunning ? null : _runSystemCheck,
            icon: _isRunning
                ? const SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      strokeWidth: 2,
                      color: Colors.white,
                    ),
                  )
                : const Icon(Icons.refresh),
            tooltip: 'Testleri Yeniden √áalƒ±≈ütƒ±r',
          ),
        ],
      ),
      body: _isRunning
          ? const Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  CircularProgressIndicator(),
                  const SizedBox(height: 16),
                  Text('Firebase baƒülantƒ±larƒ± test ediliyor...'),
                ],
              ),
            )
          : _debugResults != null
              ? _buildDebugResults()
              : const Center(child: Text('Test sonu√ßlarƒ± y√ºkleniyor...')),
    );
  }

  Widget _buildDebugResults() {
    if (_debugResults == null) return const SizedBox.shrink();

    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Genel √∂zet
          FirebaseDebugUtils.buildDebugCard(context, _debugResults!),

          const SizedBox(height: 16),

          // Auth durumu
          _buildAuthSection(),

          const SizedBox(height: 16),

          // Firestore testleri
          _buildFirestoreSection(),

          const SizedBox(height: 16),

          // Storage testleri
          _buildStorageSection(),

          const SizedBox(height: 16),

          // Hƒ±zlƒ± √ß√∂z√ºmler
          _buildQuickFixesSection(),
        ],
      ),
    );
  }

  Widget _buildAuthSection() {
    final authData = _debugResults!['auth'] as Map<String, dynamic>?;
    if (authData == null) return const SizedBox.shrink();

    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  authData['isLoggedIn'] ? Icons.check_circle : Icons.error,
                  color: authData['isLoggedIn'] ? Colors.green : Colors.red,
                ),
                const SizedBox(width: 8),
                const Text(
                  'Authentication Status',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
              ],
            ),
            const SizedBox(height: 16),
            _buildInfoRow(
                'Giri≈ü Durumu',
                authData['isLoggedIn']
                    ? '‚úÖ Giri≈ü yapƒ±lmƒ±≈ü'
                    : '‚ùå Giri≈ü yapƒ±lmamƒ±≈ü'),
            if (authData['isLoggedIn']) ...[
              _buildInfoRow('User ID', authData['userId'] ?? 'N/A'),
              _buildInfoRow('Email', authData['email'] ?? 'N/A'),
              _buildInfoRow(
                  'Display Name', authData['displayName'] ?? 'Belirlenmemi≈ü'),
              _buildInfoRow(
                  'Email Verified', authData['emailVerified'] ? '‚úÖ' : '‚ùå'),
              if (authData['lastSignIn'] != null)
                _buildInfoRow('Son Giri≈ü', authData['lastSignIn']),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildFirestoreSection() {
    final firestoreData = _debugResults!['firestore'] as Map<String, dynamic>?;
    if (firestoreData == null) return const SizedBox.shrink();

    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Row(
              children: [
                Icon(Icons.storage, color: Colors.blue),
                const SizedBox(width: 8),
                Text(
                  'Firestore Collections',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
              ],
            ),
            const SizedBox(height: 16),
            ...firestoreData.entries.map((entry) {
              final collectionName = entry.key;
              final result = entry.value as Map<String, dynamic>;

              return Card(
                color: result['success'] ? Colors.green[50] : Colors.red[50],
                child: ListTile(
                  leading: Icon(
                    result['success'] ? Icons.check_circle : Icons.error,
                    color: result['success'] ? Colors.green : Colors.red,
                  ),
                  title: Text(collectionName),
                  subtitle: Text(result['message']),
                  trailing: result['success']
                      ? const Icon(Icons.thumb_up, color: Colors.green)
                      : IconButton(
                          icon: const Icon(Icons.info, color: Colors.red),
                          onPressed: () => _showErrorDetails(result),
                        ),
                ),
              );
            }).toList(),
          ],
        ),
      ),
    );
  }

  Widget _buildStorageSection() {
    final storageData = _debugResults!['storage'] as Map<String, dynamic>?;
    if (storageData == null) return const SizedBox.shrink();

    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Row(
              children: [
                Icon(Icons.cloud_upload, color: Colors.purple),
                const SizedBox(width: 8),
                Text(
                  'Firebase Storage',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
              ],
            ),
            const SizedBox(height: 16),
            ...storageData.entries.map((entry) {
              final path = entry.key;
              final result = entry.value as Map<String, dynamic>;

              return Card(
                color: result['success'] ? Colors.green[50] : Colors.red[50],
                child: ListTile(
                  leading: Icon(
                    result['success'] ? Icons.check_circle : Icons.error,
                    color: result['success'] ? Colors.green : Colors.red,
                  ),
                  title: Text(path),
                  subtitle: Text(result['message']),
                  trailing: result['success']
                      ? const Icon(Icons.thumb_up, color: Colors.green)
                      : IconButton(
                          icon: const Icon(Icons.info, color: Colors.red),
                          onPressed: () => _showErrorDetails(result),
                        ),
                ),
              );
            }).toList(),
          ],
        ),
      ),
    );
  }

  Widget _buildQuickFixesSection() {
    final summary = _debugResults!['summary'] as Map<String, dynamic>?;
    if (summary == null || summary['allPassed'] == true) {
      return Card(
        color: Colors.green[50],
        child: const Padding(
          padding: EdgeInsets.all(16),
          child: Row(
            children: [
              Icon(Icons.check_circle, color: Colors.green),
              const SizedBox(width: 8),
              Text(
                '‚úÖ T√ºm sistemler normal √ßalƒ±≈üƒ±yor!',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                  color: Colors.green,
                ),
              ),
            ],
          ),
        ),
      );
    }

    return Card(
      color: Colors.orange[50],
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Row(
              children: [
                Icon(Icons.build, color: Colors.orange),
                const SizedBox(width: 8),
                Text(
                  'üîß Hƒ±zlƒ± √á√∂z√ºmler',
                  style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                ),
              ],
            ),
            const SizedBox(height: 16),
            const Text(
              'Genel √ñneriler:',
              style: TextStyle(fontWeight: FontWeight.w600),
            ),
            const SizedBox(height: 8),
            _buildFixItem('üîê Kullanƒ±cƒ±nƒ±n login olduƒüundan emin olun'),
            _buildFixItem(
                'üîí Firestore Rules\'ƒ± kontrol edin (≈üu an geli≈ütirme modu)'),
            _buildFixItem('üåê ƒ∞nternet baƒülantƒ±nƒ±zƒ± test edin'),
            _buildFixItem(
                'üî• Firebase Console\'dan proje ayarlarƒ±nƒ± kontrol edin'),
            _buildFixItem(
                'üì± firebase_options.dart dosyasƒ±nƒ±n g√ºncel olduƒüunu doƒürulayƒ±n'),
            const SizedBox(height: 16),
            ElevatedButton.icon(
              onPressed: () {
                showDialog(
                  context: context,
                  builder: (context) => AlertDialog(
                    title: const Text('üîß Manuel Debug'),
                    content: const Text(
                        'Firebase Console\'ƒ± a√ßƒ±n ve ≈üunlarƒ± kontrol edin:\n\n'
                        '1. Authentication > Users (kullanƒ±cƒ±lar mevcut mu?)\n'
                        '2. Firestore Database > Rules (eri≈üim kurallarƒ±)\n'
                        '3. Storage > Rules (dosya y√ºkleme kurallarƒ±)\n'
                        '4. Project Settings > General (SDK yapƒ±landƒ±rmasƒ±)'),
                    actions: [
                      TextButton(
                        onPressed: () => Navigator.pop(context),
                        child: const Text('Tamam'),
                      ),
                    ],
                  ),
                );
              },
              icon: const Icon(Icons.open_in_browser),
              label: const Text('Firebase Console\'ƒ± A√ß'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.orange,
                foregroundColor: Colors.white,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 120,
            child: Text(
              '$label:',
              style: const TextStyle(fontWeight: FontWeight.w500),
            ),
          ),
          Expanded(child: Text(value)),
        ],
      ),
    );
  }

  Widget _buildFixItem(String text) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 2),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text('‚Ä¢ '),
          Expanded(child: Text(text)),
        ],
      ),
    );
  }

  void _showErrorDetails(Map<String, dynamic> result) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(
            '‚ùå ${result['collection'] ?? result['path'] ?? 'Hata Detaylarƒ±'}'),
        content: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              Text('Hata: ${result['error']}'),
              const SizedBox(height: 16),
              if (result['suggestions'] != null) ...[
                const Text('√ñneriler:',
                    style: TextStyle(fontWeight: FontWeight.bold)),
                const SizedBox(height: 8),
                ...(result['suggestions'] as List<String>)
                    .map(
                      (suggestion) => Padding(
                        padding: const EdgeInsets.symmetric(vertical: 2),
                        child: Text('‚Ä¢ $suggestion'),
                      ),
                    )
                    .toList(),
              ],
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Tamam'),
          ),
        ],
      ),
    );
  }
}
