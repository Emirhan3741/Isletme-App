import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:file_picker/file_picker.dart';

class FileUploadService {
  static FirebaseStorage storage = FirebaseStorage.instance;
  static FirebaseFirestore firestore = FirebaseFirestore.instance;

  // Desteklenen dosya uzantƒ±larƒ±
  static List<String> get supportedExtensions => [
        'pdf',
        'doc',
        'docx',
        'txt',
        'jpg',
        'jpeg',
        'png',
        'gif',
        'mp4',
        'avi',
        'mov'
      ];

  // Maksimum dosya boyutu (MB)
  static double get maxFileSizeMB => 10.0;

  // Dosya se√ßimi (web uyumlu)
  static Future<Map<String, dynamic>?> pickFile({
    List<String>? allowedExtensions,
    bool allowMultiple = false,
    FileType fileType = FileType.any,
  }) async {
    try {
      if (kDebugMode) {
        print('üîç FilePicker √ßaƒürƒ±lƒ±yor...');
        print('üìÑ ƒ∞zin verilen uzantƒ±lar: $allowedExtensions');
        print('üî¢ √áoklu se√ßim: $allowMultiple');
      }

      // Web platformu i√ßin kIsWeb kontrol√º
      if (allowedExtensions != null && allowedExtensions.isNotEmpty) {
        fileType = FileType.custom;
      }

      // FilePicker ile dosya se√ßimi
      final result = await FilePicker.platform.pickFiles(
        type: fileType,
        allowedExtensions: allowedExtensions,
        allowMultiple: allowMultiple,
        withData: true, // Web platformu i√ßin gerekli
      );

      if (result == null || result.files.isEmpty) {
        if (kDebugMode) print('‚ùå Dosya se√ßimi iptal edildi');
        return null;
      }

      final file = result.files.first;

      if (kDebugMode) {
        print('‚úÖ Dosya se√ßildi: ${file.name}');
        print('üìè Boyut: ${file.size} bytes');
        print('üè∑Ô∏è Uzantƒ±: ${file.extension}');
      }

      // Dosya boyutu kontrol√º
      if (file.size > (maxFileSizeMB * 1024 * 1024)) {
        throw Exception('Dosya boyutu ${maxFileSizeMB}MB\'dan b√ºy√ºk olamaz');
      }

      // Web/mobil platform kontrol√º
      return {
        'fileName': file.name,
        'fileSize': file.size,
        'fileExtension': file.extension,
        'fileBytes': kIsWeb ? file.bytes : null,
        'filePath': !kIsWeb ? file.path : null,
        'isWeb': kIsWeb,
      };
    } catch (e) {
      if (kDebugMode) print('‚ùå FilePicker hatasƒ±: $e');
      rethrow;
    }
  }

  // Dosya se√ßimi ve y√ºkleme (tek i≈ülem)
  static Future<Map<String, dynamic>?> pickAndUploadFile({
    String? folderPath,
    List<String>? allowedExtensions,
    bool allowMultiple = false,
    String? userRole,
    String? userId,
  }) async {
    try {
      // Dosya se√ß
      final fileResult = await pickFile(
        allowedExtensions: allowedExtensions,
        allowMultiple: allowMultiple,
      );

      if (fileResult == null) return null;

      // Dosyayƒ± y√ºkle
      return await uploadFile(
        fileResult: fileResult,
        folderPath: folderPath ?? 'documents',
        userRole: userRole,
        userId: userId,
      );
    } catch (e) {
      if (kDebugMode) print('‚ùå Pick and upload hatasƒ±: $e');
      rethrow;
    }
  }

  // Dosya y√ºkleme (web uyumlu)
  static Future<Map<String, dynamic>> uploadFile({
    required Map<String, dynamic> fileResult,
    String folderPath = 'documents',
    String? userRole,
    String? userId,
  }) async {
    try {
      final fileName = fileResult['fileName'] ?? 'document';

      // Web platformu kontrol√º
      if (kIsWeb) {
        if (fileResult['fileBytes'] == null) {
          throw Exception('Web platformunda file bytes gerekli');
        }
        return await _uploadFromBytes(
          fileResult['fileBytes'],
          fileName,
          folderPath,
          userRole,
          userId,
        );
      } else {
        if (fileResult['filePath'] == null) {
          throw Exception('Mobil platformda file path gerekli');
        }
        return await _uploadFromPath(
          fileResult['filePath'],
          fileName,
          folderPath,
          userRole,
          userId,
        );
      }
    } catch (e) {
      if (kDebugMode) print('‚ùå Upload hatasƒ±: $e');
      rethrow;
    }
  }

  // Web'den bytes ile y√ºkleme
  static Future<Map<String, dynamic>> _uploadFromBytes(
    Uint8List bytes,
    String fileName,
    String folderPath,
    String? userRole,
    String? userId,
  ) async {
    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user == null) throw Exception('Kullanƒ±cƒ± giri≈ü yapmamƒ±≈ü');

      final timestamp = DateTime.now().millisecondsSinceEpoch;
      final fileExtension = fileName.split('.').last;
      final uploadPath = '$folderPath/${user.uid}/${timestamp}_$fileName';

      if (kDebugMode) print('üì§ Web upload ba≈ülƒ±yor: $uploadPath');

      final ref = storage.ref().child(uploadPath);
      final uploadTask = ref.putData(bytes);

      final snapshot = await uploadTask;
      final downloadUrl = await snapshot.ref.getDownloadURL();

      final fileDoc = {
        'fileName': fileName,
        'downloadUrl': downloadUrl,
        'filePath': uploadPath,
        'fileSize': bytes.length,
        'fileExtension': fileExtension,
        'uploadDate': FieldValue.serverTimestamp(),
        'uploadedBy': user.uid,
        'userRole': userRole,
        'userId': userId,
      };

      await firestore.collection('documents').add(fileDoc);

      if (kDebugMode) print('‚úÖ Web upload tamamlandƒ±: $downloadUrl');

      return {
        'success': true,
        'downloadUrl': downloadUrl,
        'fileName': fileName,
        'fileSize': bytes.length,
        'message': 'Dosya ba≈üarƒ±yla y√ºklendi',
      };
    } catch (e) {
      if (kDebugMode) print('‚ùå Web upload hatasƒ±: $e');
      rethrow;
    }
  }

  // Mobil'den path ile y√ºkleme
  static Future<Map<String, dynamic>> _uploadFromPath(
    String filePath,
    String fileName,
    String folderPath,
    String? userRole,
    String? userId,
  ) async {
    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user == null) throw Exception('Kullanƒ±cƒ± giri≈ü yapmamƒ±≈ü');

      final timestamp = DateTime.now().millisecondsSinceEpoch;
      final fileExtension = fileName.split('.').last;
      final uploadPath = '$folderPath/${user.uid}/${timestamp}_$fileName';

      if (kDebugMode) print('üì§ Mobil upload ba≈ülƒ±yor: $uploadPath');

      final ref = storage.ref().child(uploadPath);
      final uploadTask = ref.putFile(File(filePath));

      final snapshot = await uploadTask;
      final downloadUrl = await snapshot.ref.getDownloadURL();

      final file = File(filePath);
      final fileSize = await file.length();

      final fileDoc = {
        'fileName': fileName,
        'downloadUrl': downloadUrl,
        'filePath': uploadPath,
        'fileSize': fileSize,
        'fileExtension': fileExtension,
        'uploadDate': FieldValue.serverTimestamp(),
        'uploadedBy': user.uid,
        'userRole': userRole,
        'userId': userId,
      };

      await firestore.collection('documents').add(fileDoc);

      if (kDebugMode) print('‚úÖ Mobil upload tamamlandƒ±: $downloadUrl');

      return {
        'success': true,
        'downloadUrl': downloadUrl,
        'fileName': fileName,
        'fileSize': fileSize,
        'message': 'Dosya ba≈üarƒ±yla y√ºklendi',
      };
    } catch (e) {
      if (kDebugMode) print('‚ùå Mobil upload hatasƒ±: $e');
      rethrow;
    }
  }

  // Dosya ve belge kaydetme (backward compatibility)
  static Future<Map<String, dynamic>> uploadAndSaveDocument({
    required String fileName,
    required Uint8List? fileBytes,
    required String? filePath,
    required String module,
    String? customPath,
    Function(double)? onProgress,
  }) async {
    try {
      final fileResult = {
        'fileName': fileName,
        'fileBytes': fileBytes,
        'filePath': filePath,
      };

      return await uploadFile(
        fileResult: fileResult,
        folderPath: customPath ?? module,
      );
    } catch (e) {
      if (kDebugMode) print('‚ùå Upload and save hatasƒ±: $e');
      rethrow;
    }
  }

  // Dosya silme
  static Future<bool> deleteFile(String storagePath) async {
    try {
      if (kDebugMode) print('üóëÔ∏è Dosya siliniyor: $storagePath');

      final ref = storage.ref().child(storagePath);
      await ref.delete();

      if (kDebugMode) print('‚úÖ Dosya silindi: $storagePath');
      return true;
    } catch (e) {
      if (kDebugMode) print('‚ùå Dosya silme hatasƒ±: $e');
      return false;
    }
  }

  // Dosya boyutu formatlama
  static String formatFileSize(int bytes) {
    if (bytes < 1024) return '$bytes B';
    if (bytes < 1024 * 1024) return '${(bytes / 1024).toStringAsFixed(1)} KB';
    if (bytes < 1024 * 1024 * 1024)
      return '${(bytes / (1024 * 1024)).toStringAsFixed(1)} MB';
    return '${(bytes / (1024 * 1024 * 1024)).toStringAsFixed(1)} GB';
  }

  // Dosya ikonu
  static String getFileIcon(String? extension) {
    if (extension == null) return 'üìÑ';

    switch (extension.toLowerCase()) {
      case 'pdf':
        return 'üìã';
      case 'doc':
      case 'docx':
        return 'üìù';
      case 'txt':
        return 'üìÑ';
      case 'jpg':
      case 'jpeg':
      case 'png':
      case 'gif':
        return 'üñºÔ∏è';
      case 'mp4':
      case 'avi':
      case 'mov':
        return 'üé•';
      case 'mp3':
      case 'wav':
        return 'üéµ';
      case 'zip':
      case 'rar':
        return 'üì¶';
      default:
        return 'üìÑ';
    }
  }

  // Storage path olu≈üturma
  static String getStoragePath(String module, String fileName) {
    final user = FirebaseAuth.instance.currentUser;
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    return '$module/${user?.uid}/${timestamp}_$fileName';
  }
}

// Backward compatibility i√ßin eski sƒ±nƒ±flar
class FileUploadResult {
  final Map<String, dynamic> file;
  final String originalName;
  final String extension;
  final int sizeInBytes;
  final double sizeInMB;

  FileUploadResult({
    required this.file,
    required this.originalName,
    required this.extension,
    required this.sizeInBytes,
    required this.sizeInMB,
  });
}

class UploadedFileData {
  final String fileName;
  final String originalFileName;
  final String fileUrl;
  final String fileExtension;
  final int fileSizeBytes;
  final double fileSizeMB;
  final String storagePath;
  final DateTime uploadDate;

  UploadedFileData({
    required this.fileName,
    required this.originalFileName,
    required this.fileUrl,
    required this.fileExtension,
    required this.fileSizeBytes,
    required this.fileSizeMB,
    required this.storagePath,
    required this.uploadDate,
  });

  Map<String, dynamic> toMap() {
    return {
      'fileName': fileName,
      'originalFileName': originalFileName,
      'downloadUrl': fileUrl,
      'fileExtension': fileExtension,
      'fileSize': fileSizeBytes,
      'fileSizeMB': fileSizeMB,
      'storagePath': storagePath,
      'uploadDate': uploadDate,
    };
  }
}

class UploadCompletionResult {
  final bool success;
  final UploadedFileData? fileData;
  final String message;

  UploadCompletionResult({
    required this.success,
    this.fileData,
    required this.message,
  });
}
